matriz[i][j]
    [][][],
    [][][],
    [][][]  

!!!!!Ver primeiro se nos [0][j] | [i][0] ha pecas a apontar para o nada

"BB": 
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD            //pecas horizontais que encaixam com pecas a vir da direita
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE            //pecas horizontais que encaixam com pecas a vir da esquerda
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD            //pecas verticais que encaixam com pecas a vir de cima

"BC":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE             //pecas verticais que encaixam com pecas a vir de baixo

"BD":
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"BE":
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD 
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"FB":
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"FC":
     matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"FD":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE           

"FE":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD

"LH":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE

"LV":
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VB":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD 

"VC":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VD":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VE":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

     combinacoes_possiveis = {
        "BB": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"],
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "BC": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"],
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "BD": {"up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "BE": {"up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"], 
                "left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "FB": {"down": ["BC", "BD", "BE", "LV", "VC", "VD"]},
        "FC": {"up": ["BB", "BD", "BE", "LV", "VB", "VE"]},
        "FD": {"right": ["BB", "BC", "BE", "LH", "VC", "VE"]},
        "FE": {"left": ["BB", "BC", "BD", "LH", "VB", "VD"]},
        "LH": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"]},
        "LV": {"down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VB": {"right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "VC": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VD": {"right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VE": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]}
        }



    

        combinacoes_impossiveis = {
        "BB": { "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "BC": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "BD": {"down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"], 
                "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"]}, 
        "BE": {"right": ["FE", "BB", "BC", "LH", "VC", "VE"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "FB": { "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]},
        "FC": {"down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]},
        "FD": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "FE": {"down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]}
        "LH": { "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "LV": {"right": ["FE", "BB", "BC", "LH", "VC", "VE"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "VB": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "VC": { "right": ["FE", "BB", "BC", "LH", "VC", "VE"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "VD": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "VE": { "right": ["FE", "BB", "BC", "LH", "VC", "VE"],
                "down": "BB", "FB", "FD", "FE", "LH", "VB", "VE"[]}
        }



       
                peca_direita, peca_esquerda, peca_cima, peca_baixo = None, None, None, None
                if linha != 0:
                    peca_cima = state.board.matriz_board[linha - 1][coluna]
                if coluna != 0:
                    peca_esquerda = state.board.matriz_board[linha][coluna - 1]
                if linha != ult_pos:
                    peca_baixo = state.board.matriz_board[linha + 1][coluna]
                if coluna != ult_pos:
                    peca_direita = state.board.matriz_board[linha][coluna + 1]
                
                acoes_cima = set()
                acoes_baixo = set()
                acoes_direita = set()
                acoes_esquerda = set()

                if peca_cima != None and peca_cima[0] == "F" and peca[0] == "F":
                    if peca[1] == "B":
                        acoes_cima = {RODA_ANTIHORARIO, RODA_HORARIO}
                        
                    elif peca[1] == "D":
                        acoes_cima = {RODA_HORARIO, RODA_180}
                       
                    elif peca[1] == "E":
                        acoes_cima = {RODA_ANTIHORARIO, RODA_180}
                        
                if peca_baixo != None and peca_baixo[0] == "F" and peca[0] == "F":
                    if peca[1] == "C":
                        acoes_baixo = {RODA_ANTIHORARIO, RODA_HORARIO}
                       
                    elif peca[1] == "D":
                        acoes_baixo = {RODA_ANTIHORARIO, RODA_180}
                        
                    elif peca[1] == "E":
                        acoes_baixo = {RODA_HORARIO, RODA_180}
                        
                if peca_direita != None and peca_direita[0] == "F" and peca[0] == "F":
                    if peca[1] == "C":
                        acoes_direita = {RODA_180, RODA_ANTIHORARIO}
                        
                    elif peca[1] == "B":
                        acoes_direita = {RODA_180, RODA_HORARIO}
                        
                    elif peca[1] == "E":
                        acoes_direita = {RODA_ANTIHORARIO, RODA_HORARIO}
                        
                if peca_esquerda != None and peca_esquerda[0] == "F" and peca[0] == "F":
                    if peca[1] == "C":
                        acoes_esquerda = {RODA_180, RODA_HORARIO}
                       
                    elif peca[1] == "B":
                        acoes_esquerda = {RODA_180, RODA_ANTIHORARIO}
                        
                    elif peca[1] == "D":
                        acoes_esquerda = {RODA_ANTIHORARIO, RODA_HORARIO}
                acoes_comuns = acoes_cima & acoes_baixo & acoes_direita & acoes_esquerda
                if peca[0] == "F":
                    for acao in acoes_comuns:
                        yield (linha, coluna, acao)

if num_erradas == 0:
                    if peca_cima != None and (linha - 1, coluna) in coordenadas_fechadas:
                        quantas_bloqueadas += 1
                    if peca_esquerda != None and (linha, coluna - 1) in coordenadas_fechadas:
                        quantas_bloqueadas += 1
                    if peca_direita != None and (linha, coluna + 1) in coordenadas_fechadas:
                        quantas_bloqueadas += 1
                    if peca_baixo != None and (linha + 1, coluna) in coordenadas_fechadas:
                        quantas_bloqueadas += 1 
                    if quantas_bloqueadas == num_orientacoes:
                        print(peca, linha, coluna)
                        coordenadas_fechadas.append((linha, coluna))
    


   
   




 

def verifica_bloqueio(self, linha, coluna):
        if (linha, coluna) in coordenadas_fechadas: return
        ult_pos = b_size - 1
        peca_cima, peca_esquerda, peca_direita, peca_baixo = None, None, None, None
        num_bloqueios = 0
        peca = self.matriz_board[linha][coluna]
        if linha != 0:
            peca_cima = self.matriz_board[linha - 1][coluna]
        if coluna != 0:
            peca_esquerda = self.matriz_board[linha][coluna - 1]
        if linha != ult_pos:
            peca_baixo = self.matriz_board[linha + 1][coluna]
        if coluna != ult_pos:
            peca_direita = self.matriz_board[linha][coluna + 1]

        direcoes_possiveis = combinacoes_possiveis[peca].keys()
        num_orientacoes = len(direcoes_possiveis)
        if linha == ult_pos - 1 and coluna == 1: print(num_orientacoes)
        if "left" in direcoes_possiveis and peca_esquerda in combinacoes_possiveis[peca]["left"]:
            if linha == ult_pos - 1 and coluna == 1: print("ola")
            if (linha, coluna - 1) in coordenadas_fechadas:
                num_bloqueios += 1
        if "right" in direcoes_possiveis and peca_direita in combinacoes_possiveis[peca]["right"]:
            if linha == ult_pos - 1 and coluna == 1: print("ola2")
            if (linha, coluna + 1) in coordenadas_fechadas:
                print(peca_direita)
                num_bloqueios += 1
        if "up" in direcoes_possiveis and peca_cima in combinacoes_possiveis[peca]["up"]:
            if linha == ult_pos - 1 and coluna == 1: print("ola3")
            if (linha - 1, coluna) in coordenadas_fechadas:
                num_bloqueios += 1
        if "down" in direcoes_possiveis and peca_baixo in combinacoes_possiveis[peca]["down"]:
            if linha == ult_pos - 1 and coluna == 1: print("ola7")
            if (linha + 1, coluna) in coordenadas_fechadas:
                num_bloqueios += 1
        if linha == ult_pos - 1 and coluna == 1: print(peca, "pecva")
        if num_orientacoes == num_bloqueios: 
            if linha == ult_pos - 1 and coluna == 1:
                print(peca_baixo, "peca down")
                coordenadas_fechadas.append((linha, coluna))
    



    def penalizacao_bordas_cantos(self):
        
        ult_pos = b_size - 1
        penalizacao = 0

        for i in range(ult_pos+1):
            pecaBordaEsq = self.matriz_board[i][0]
            pecaBordaCima = self.matriz_board[0][i]
            pecaBordaBaixo = self.matriz_board[ult_pos][i]
            pecaBordaDir = self.matriz_board[i][ult_pos]

            if i == 0:
                if pecaBordaEsq in pecas_bordas_cantos[0] or pecaBordaEsq in pecas_bordas_cantos[1]:
                    penalizacao += 3
            
            elif i == ult_pos:
                if pecaBordaEsq in pecas_bordas_cantos[0] or pecaBordaEsq in pecas_bordas_cantos[2]:
                    penalizacao += 3
                
                if pecaBordaCima in pecas_bordas_cantos[1] or pecaBordaCima in pecas_bordas_cantos[3]:
                    penalizacao += 3
                
                if pecaBordaBaixo in pecas_bordas_cantos[2] or pecaBordaBaixo in pecas_bordas_cantos[3]:
                    penalizacao += 3
            
            else:
                if pecaBordaEsq in pecas_bordas_cantos[0]:
                    penalizacao += 3
                
                if pecaBordaCima in pecas_bordas_cantos[1]:
                    penalizacao += 3
                
                if pecaBordaBaixo in pecas_bordas_cantos[2]:
                    penalizacao += 3

                if pecaBordaDir in pecas_bordas_cantos[3]:
                    penalizacao += 3

        return penalizacao 

