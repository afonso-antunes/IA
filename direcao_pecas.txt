matriz[i][j]
    [][][],
    [][][],
    [][][]  

!!!!!Ver primeiro se nos [0][j] | [i][0] ha pecas a apontar para o nada

"BB": 
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD            //pecas horizontais que encaixam com pecas a vir da direita
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE            //pecas horizontais que encaixam com pecas a vir da esquerda
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD            //pecas verticais que encaixam com pecas a vir de cima

"BC":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE             //pecas verticais que encaixam com pecas a vir de baixo

"BD":
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"BE":
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD 
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"FB":
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"FC":
     matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"FD":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE           

"FE":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD

"LH":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE

"LV":
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VB":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD 

"VC":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VD":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VE":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

     combinacoes_possiveis = {
        "BB": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"],
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "BC": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"],
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "BD": {"up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "BE": {"up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"], 
                "left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "FB": {"down": ["BC", "BD", "BE", "LV", "VC", "VD"]},
        "FC": {"up": ["BB", "BD", "BE", "LV", "VB", "VE"]},
        "FD": {"right": ["BB", "BC", "BE", "LH", "VC", "VE"]},
        "FE": {"left": ["BB", "BC", "BD", "LH", "VB", "VD"]},
        "LH": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"]},
        "LV": {"down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VB": {"right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "VC": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VD": {"right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VE": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]}
        }



    

        combinacoes_impossiveis = {
        "BB": { "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "BC": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "BD": {"down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"], 
                "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"]}, 
        "BE": {"right": ["FE", "BB", "BC", "LH", "VC", "VE"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "FB": { "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]},
        "FC": {"down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]},
        "FD": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "FE": {"down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]}
        "LH": { "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "LV": {"right": ["FE", "BB", "BC", "LH", "VC", "VE"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "VB": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "VC": { "right": ["FE", "BB", "BC", "LH", "VC", "VE"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "VD": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "VE": { "right": ["FE", "BB", "BC", "LH", "VC", "VE"],
                "down": "BB", "FB", "FD", "FE", "LH", "VB", "VE"[]}
        }



       
                peca_direita, peca_esquerda, peca_cima, peca_baixo = None, None, None, None
                if linha != 0:
                    peca_cima = state.board.matriz_board[linha - 1][coluna]
                if coluna != 0:
                    peca_esquerda = state.board.matriz_board[linha][coluna - 1]
                if linha != ult_pos:
                    peca_baixo = state.board.matriz_board[linha + 1][coluna]
                if coluna != ult_pos:
                    peca_direita = state.board.matriz_board[linha][coluna + 1]
                
                acoes_cima = set()
                acoes_baixo = set()
                acoes_direita = set()
                acoes_esquerda = set()

                if peca_cima != None and peca_cima[0] == "F" and peca[0] == "F":
                    if peca[1] == "B":
                        acoes_cima = {RODA_ANTIHORARIO, RODA_HORARIO}
                        
                    elif peca[1] == "D":
                        acoes_cima = {RODA_HORARIO, RODA_180}
                       
                    elif peca[1] == "E":
                        acoes_cima = {RODA_ANTIHORARIO, RODA_180}
                        
                if peca_baixo != None and peca_baixo[0] == "F" and peca[0] == "F":
                    if peca[1] == "C":
                        acoes_baixo = {RODA_ANTIHORARIO, RODA_HORARIO}
                       
                    elif peca[1] == "D":
                        acoes_baixo = {RODA_ANTIHORARIO, RODA_180}
                        
                    elif peca[1] == "E":
                        acoes_baixo = {RODA_HORARIO, RODA_180}
                        
                if peca_direita != None and peca_direita[0] == "F" and peca[0] == "F":
                    if peca[1] == "C":
                        acoes_direita = {RODA_180, RODA_ANTIHORARIO}
                        
                    elif peca[1] == "B":
                        acoes_direita = {RODA_180, RODA_HORARIO}
                        
                    elif peca[1] == "E":
                        acoes_direita = {RODA_ANTIHORARIO, RODA_HORARIO}
                        
                if peca_esquerda != None and peca_esquerda[0] == "F" and peca[0] == "F":
                    if peca[1] == "C":
                        acoes_esquerda = {RODA_180, RODA_HORARIO}
                       
                    elif peca[1] == "B":
                        acoes_esquerda = {RODA_180, RODA_ANTIHORARIO}
                        
                    elif peca[1] == "D":
                        acoes_esquerda = {RODA_ANTIHORARIO, RODA_HORARIO}
                acoes_comuns = acoes_cima & acoes_baixo & acoes_direita & acoes_esquerda
                if peca[0] == "F":
                    for acao in acoes_comuns:
                        yield (linha, coluna, acao)

if num_erradas == 0:
                    if peca_cima != None and (linha - 1, coluna) in coordenadas_fechadas:
                        quantas_bloqueadas += 1
                    if peca_esquerda != None and (linha, coluna - 1) in coordenadas_fechadas:
                        quantas_bloqueadas += 1
                    if peca_direita != None and (linha, coluna + 1) in coordenadas_fechadas:
                        quantas_bloqueadas += 1
                    if peca_baixo != None and (linha + 1, coluna) in coordenadas_fechadas:
                        quantas_bloqueadas += 1 
                    if quantas_bloqueadas == num_orientacoes:
                        print(peca, linha, coluna)
                        coordenadas_fechadas.append((linha, coluna))
    


   
   if num_orientacoes == 1: #F
                    if peca == "FC" and peca_cima in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "FB" and peca_baixo in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "FD" and peca_direita in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "FE" and peca_esquerda in coordenadas_fechadas: coordenadas_fechadas.append(coords)

                elif num_orientacoes == 2:
                    if peca == "LH":
                        if peca_direita in coordenadas_fechadas and peca_esquerda in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "LV":
                        if peca_cima in coordenadas_fechadas and peca_baixo in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "VB":
                        if peca_direita in coordenadas_fechadas and peca_baixo in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "VD":
                        if peca_direita in coordenadas_fechadas and peca_cima in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "VE":
                        if peca_baixo in coordenadas_fechadas and peca_esquerda in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                    elif peca == "VC":
                        if peca_cima in coordenadas_fechadas and peca_esquerda in coordenadas_fechadas: coordenadas_fechadas.append(coords)
                
                elif num_orientacoes == 3:
                    if peca == "BB":
                        if peca_direita in coordenadas_fechadas and peca_esquerda in coordenadas_fechadas and peca_baixo in coordenadas_fechadas:
                            coordenadas_fechadas.append(coords)
                    elif peca == "BC":
                        if peca_direita in coordenadas_fechadas and peca_esquerda in coordenadas_fechadas and peca_cima in coordenadas_fechadas:
                            coordenadas_fechadas.append(coords)
                    elif peca == "BD":
                        if peca_direita in coordenadas_fechadas and peca_cima in coordenadas_fechadas and peca_baixo in coordenadas_fechadas:
                            coordenadas_fechadas.append(coords)
                    elif peca == "BE":
                        if peca_cima in coordenadas_fechadas and peca_esquerda in coordenadas_fechadas and peca_baixo in coordenadas_fechadas:
                            coordenadas_fechadas.append(coords)





 


    