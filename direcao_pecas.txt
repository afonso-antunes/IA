matriz[i][j]
    [][][],
    [][][],
    [][][]  

!!!!!Ver primeiro se nos [0][j] | [i][0] ha pecas a apontar para o nada

"BB": 
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD            //pecas horizontais que encaixam com pecas a vir da direita
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE            //pecas horizontais que encaixam com pecas a vir da esquerda
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD            //pecas verticais que encaixam com pecas a vir de cima

"BC":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE             //pecas verticais que encaixam com pecas a vir de baixo

"BD":
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"BE":
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD 
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"FB":
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

"FC":
     matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"FD":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE           

"FE":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD

"LH":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE

"LV":
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VB":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD 

"VC":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VD":
    matriz[i][j+1] -> BB, BC, BE, FE, LH, VC, VE
    matriz[i-1][j] -> BB, BD, BE, FB, LV, VB, VE

"VE":
    matriz[i][j-1] -> BB, BC, BD, FD, LH, VB, VD
    matriz[i+1][j] -> BC, BD, BE, FC, LV, VC, VD

     combinacoes_possiveis = {
        "BB": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"],
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "BC": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"],
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "BD": {"up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "BE": {"up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"], 
                "left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "FB": {"down": ["BC", "BD", "BE", "LV", "VC", "VD"]},
        "FC": {"up": ["BB", "BD", "BE", "LV", "VB", "VE"]},
        "FD": {"right": ["BB", "BC", "BE", "LH", "VC", "VE"]},
        "FE": {"left": ["BB", "BC", "BD", "LH", "VB", "VD"]},
        "LH": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"]},
        "LV": {"down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VB": {"right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]},
        "VC": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VD": {"right": ["BB", "BC", "BE", "FE", "LH", "VC", "VE"], 
                "up": ["BB", "BD", "BE", "FB", "LV", "VB", "VE"]},
        "VE": {"left": ["BB", "BC", "BD", "FD", "LH", "VB", "VD"], 
                "down": ["BC", "BD", "BE", "FC", "LV", "VC", "VD"]}
        }



        # Função para obter as direções disponíveis para uma peça específica
        def obter_direcoes_disponiveis(peca):
        direcoes = []
        if peca in combinacoes_possiveis:
                combinacoes = combinacoes_possiveis[peca]
                if "left" in combinacoes:
                direcoes.append("left")
                if "right" in combinacoes:
                direcoes.append("right")
                if "up" in combinacoes:
                direcoes.append("up")
                if "down" in combinacoes:
                direcoes.append("down")
        return direcoes

        # Exemplo de uso da função
        direcoes_VE = obter_direcoes_disponiveis("VE")
        print("Direções disponíveis para a peça 'VE':", direcoes_VE)

        combinacoes_impossiveis = {
        "BB": { "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "BC": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "BD": {"down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"], 
                "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"]}, 
        "BE": {"right": ["FE", "BB", "BC", "LH", "VC", "VE"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "FB": { "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]},
        "FC": {"down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]},
        "FD": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "FE": {"down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"],
                "right": ["FE", "BB", "BC", "LH", "VC", "VE"]}
        "LH": { "right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "LV": {"right": ["FE", "BB", "BC", "LH", "VC", "VE"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "VB": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BB", "FB", "FD", "FE", "LH", "VB", "VE"]},
        "VC": { "right": ["FE", "BB", "BC", "LH", "VC", "VE"],
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "VD": {"right": ["BD", "FB", "FC", "FD", "LV", "VB", "VD"], 
                "down": ["BD", "BE", "FB", "FC", "LV", "VC", "VD"]},
        "VE": { "right": ["FE", "BB", "BC", "LH", "VC", "VE"],
                "down": "BB", "FB", "FD", "FE", "LH", "VB", "VE"[]}
        }



        line = 0
        col = 0
        while line < state.board.board_size():
            if (state.board.matriz_board[line][0] in ["BB", "BC", "BE", "FE", "LH", "VC", "VE"]):
                return False
            line +=1
        if (state.board.matriz_board[0][0] in ["VD", "LV", "FC", "BD"]):
            return False
        if (state.board.matriz_board[line-1][0] in ["VB", "LV", "FB", "BD"]):
            return False



            
    """["C", "D", "B", "E"]
    True == +1
    ["V", "H"]
    """




    pecas_bordas_cantos = ( ("BB", "BC", "BE", "LH", "FE", "VC", "VE"),  # coluna esquerda
                        ("BC", "BD", "BE", "LV", "FC", "VD", "VC"),  # linha de cima
                        ("BB", "BD", "BE", "LV", "FB", "VE", "VB"),  # linha de baixo
                        ("BC", "BD", "BB", "LH", "FD", "VD", "VB"),) # coluna direita




 def penalizacao_bordas_cantos(self):
        ult_pos = self.board_size()-1
        penalizacao = 0
        for linha in enumerate(ult_pos):
            peca = self.matriz_board[linha][0]

            if linha == 0:
                if peca in pecas_bordas_cantos[0] or peca in pecas_bordas_cantos[1]:
                    penalizacao += 100
            
            elif linha == ult_pos:
                if peca in pecas_bordas_cantos[0] or peca in pecas_bordas_cantos[2]:
                    penalizacao += 100
            
            else:
                if peca in pecas_bordas_cantos[0]:
                    penalizacao += 50



def total_posicoes_imp(self):

        total_imp = 0
        ult_pos = self.board_size()-1
        for coluna in range(ult_pos+1):  
            for linha in range(ult_pos+1):
                peca = self.matriz_board[linha][coluna]
                peca_direita = None
                peca_baixo = None
                
                if linha != ult_pos:
                    peca_baixo = self.matriz_board[linha + 1][coluna]
                if coluna != ult_pos:
                    peca_direita = self.matriz_board[linha][coluna + 1]

                if peca_direita in combinacoes_imp[peca]["right"]:
                    total_imp += 1
                if peca_baixo in combinacoes_imp[peca]["down"]:
                    total_imp += 1   

        return total_imp
    



    direcoes = {
    'C': {'True': 'D', 'False': 'E'},
    'D': {'True': 'B', 'False': 'C'},
    'B': {'True': 'E', 'False': 'D'},
    'E': {'True': 'C', 'False': 'B'},
    'V': {'True': 'H', 'False': 'H'},
    'H': {'True': 'V', 'False': 'V'}
    }